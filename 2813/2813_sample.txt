#include <iostream>  
#include <stdio.h>  
#include <string.h>  
#include <math.h>  
#include <stdlib.h>  
#include <string>  
#include <vector>  
#include <list>  
#include <algorithm>  
#include <deque>  
#include <stack>  
  
using namespace std;  
  
// 同样，在外围加一层，保证 press 的时候比较好处理，这是输入的情况数组  
int arr1[ 17 ][ 17 ];  
  
// 这是每次处理时用的情况数组  
int arr2[ 17 ][ 17 ];  
  
// 用于存储按下情况的数组  
int pressArr[ 17 ][ 17 ];  
  
// 按下的操作  
void press( int r, int c )  
{  
    if ( arr2[ r ][ c ] == 0 )  
        arr2[ r ][ c ] = 1;  
    else  
        arr2[ r ][ c ] = 0;  
  
    if ( arr2[ r - 1 ][ c ] == 0 )  
        arr2[ r - 1 ][ c ] = 1;  
    else  
        arr2[ r - 1 ][ c ] = 0;  
  
    if ( arr2[ r + 1 ][ c ] == 0 )  
        arr2[ r + 1 ][ c ] = 1;  
    else  
        arr2[ r + 1 ][ c ] = 0;  
  
    if ( arr2[ r ][ c - 1 ] == 0 )  
        arr2[ r ][ c - 1 ] = 1;  
    else  
        arr2[ r ][ c - 1 ] = 0;  
  
    if ( arr2[ r ][ c + 1 ] == 0 )  
        arr2[ r ][ c + 1 ] = 1;  
    else  
        arr2[ r ][ c + 1 ] = 0;  
}  
  
int main()  
{  
    int t;  
    scanf( "%d", &t );  
  
    int n;  
  
    int i, j, k, p, q;  
  
    char cTemp;  
  
    // 第一行的 case 种类  
    int firstCount;  
  
    int min;  
  
    int pressCount;  
  
    bool result;  
  
    while ( t > 0 )  
    {  
        scanf( "%d", &n );  
  
        memset( arr1, 0, sizeof( arr1 ) );  
  
        min = 10000;  
  
        result = false;  
  
        getchar();  
  
        for ( i = 1; i <= n; ++ i )  
        {  
            for ( j = 1; j <= n; ++ j )  
            {  
                scanf( "%c", &cTemp );  
  
                if ( cTemp == 'y' )  
                    arr1[ i ][ j ] = 1;  
                else  
                    arr1[ i ][ j ] = 0;  
            }  
  
            // \n  
            getchar();  
        }  
  
        // 处理第一行，第一行有 2 的 n 次方种情况  
        firstCount = 1;  
  
        for ( i = 0; i < n; ++ i )  
            firstCount *= 2;  
  
        for ( i = 0; i < firstCount; ++ i )  
        {  
            memcpy( arr2, arr1, sizeof( arr1 ) );  
            memset( pressArr, 0, sizeof( pressArr ) );  
  
            pressCount = 0;  
  
            // 总共最多有 15 位  
  
            p = 1;  
  
            for ( j = 1; j <= n; ++ j )  
            {  
                k = i & p;  
  
                if ( k == p )  
                {  
                    pressArr[ 1 ][ j ] = 1;  
                    press( 1, j );  
                    ++ pressCount;  
                }  
  
                p *= 2;  
            }  
  
            // 第一行按下过后，第一行的剩余状态就是第二行需要按下的状态  
            // ....后面的类似，直到最后一行  
            for ( j = 2; j <= n; ++ j )  
                for ( k = 1; k <= n; ++ k )  
                    if ( arr2[ j - 1 ][ k ] == 0 )  
                    {  
                        pressArr[ j ][ k ] = 1;  
                        press( j, k );  
                        ++ pressCount;  
                    }  
  
            // 最后一行按下后，判断最后一行是否为全 1，如果是，则找到了  
            bool b = true;  
            for ( j = 1; j <= n ; ++ j )  
                if ( arr2[ n ][ j ] == 0 )  
                {  
                    b = false;  
                    break;  
                }  
  
            if ( b )   
            {  
                if ( pressCount < min ) min = pressCount;  
                result = true;  
            }  
            else   
                continue;  
        }  
  
        if ( result ) printf( "%d\n", min );  
        else printf( "inf\n" );  
  
        -- t;  
    }  
  
    // system( "pause" );  
    return 0;  
}  